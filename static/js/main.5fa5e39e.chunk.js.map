{"version":3,"sources":["Header.jsx","NavButton.jsx","CVBlockElement.jsx","CVBlock.jsx","CVBlockTech.jsx","CVBlockLang.jsx","CV.jsx","CVBlockContents.jsx","MyProjects.jsx","NavLink.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Head","styled","div","Header","Button","button","NavButton","label","onClick","ProgressBar","Progress","props","value","Label","span","CVBlockElement","progress","sub","undefined","map","element","Div","Text","CVBlock","elements","title","text","className","CVBlockTech","CVBlockLang","CV","style","flex","order","width","MyProjects","Link","a","NavLink","href","target","App","useState","displayed","setDisplayed","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gcAIA,IAAMA,EAAOC,IAAOC,IAAV,KAmBKC,MARf,WACE,OACE,kBAACH,EAAD,iD,whBCbJ,IAAMI,EAASH,IAAOI,OAAV,KA6BGC,MARf,YAAwC,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,QAC1B,OACE,kBAACJ,EAAD,CAAQI,QAASA,GACdD,I,sgBCvBP,IAAME,EAAcR,IAAOC,IAAV,KAYXQ,EAAWT,IAAOC,IAAV,KAGH,SAAAS,GAAK,OAAIA,EAAMC,SAIpBC,EAAQZ,IAAOa,KAAV,KA6BIC,MAzBf,SAASA,EAAT,GAAiD,IAAxBR,EAAuB,EAAvBA,MAAOS,EAAgB,EAAhBA,SAAUC,EAAM,EAANA,IACxC,OACE,4BACE,kBAACJ,EAAD,KAAQN,QACKW,GAAZF,EACK,kBAACP,EAAD,KACE,kBAACC,EAAD,CAAUE,MAAOI,UAEnBE,EACN,4BACCD,EACGA,EACCE,KAAI,SAACC,GAAD,OACH,kBAACL,EAAD,CACER,MAAOa,EAAQb,MACfS,SAAUI,EAAQJ,SAClBC,IAAKG,EAAQH,cAGjBC,K,ocCzCV,IAAMG,EAAMpB,IAAOC,IAAV,KASHoB,EAAOrB,IAAOC,IAAV,KAoCKqB,MA5Bf,YAA6C,IAA1BC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,KAClC,OACE,kBAACL,EAAD,KACE,wBAAIM,UAAU,gBAAgBF,QACjBP,GAAZM,EACI,4BACAA,EACEL,KAAI,SAACC,GAAD,OACH,kBAAC,EAAD,CACEb,MAAOa,EAAQb,MACfS,SAAUI,EAAQJ,SAClBC,IAAKG,EAAQH,eAInBC,OACOA,GAARQ,EACG,kBAACJ,EAAD,KAAOI,QACPR,ICDGU,MApCf,WACE,OACE,kBAAC,EAAD,CACEH,MAAM,kCACND,SAAU,CACR,CAAEjB,MAAO,QAASS,SAAU,IAC5B,CACET,MAAO,OACPS,SAAU,GACVC,IAAK,CACH,CAAEV,MAAO,cAAeS,SAAU,MAGtC,CAAET,MAAO,kBAAmBS,SAAU,IACtC,CAAET,MAAO,QAASS,SAAU,IAC5B,CACET,MAAO,WACPS,SAAU,GACVC,IAAK,CACH,CAAEV,MAAO,iBAAkBS,SAAU,IACrC,CAAET,MAAO,SAAUS,SAAU,IAC7B,CAAET,MAAO,QAASS,SAAU,MAGhC,CAAET,MAAO,MAAOS,SAAU,IAC1B,CAAET,MAAO,sBAAuBS,SAAU,IAC1C,CAAET,MAAO,MAAOS,SAAU,IAC1B,CAAET,MAAO,QAASS,SAAU,IAC5B,CAAET,MAAO,WAAYS,SAAU,IAC/B,CAAET,MAAO,QAASS,SAAU,QCdrBa,MAdf,WACE,OACE,kBAAC,EAAD,CACEJ,MAAM,mBACND,SAAU,CACR,CAAEjB,MAAO,SAAUS,SAAU,KAC7B,CAAET,MAAO,UAAWS,SAAU,IAC9B,CAAET,MAAO,SAAUS,SAAU,IAC7B,CAAET,MAAO,UAAWS,SAAU,QCiDvBc,MAvDf,WACE,OACE,8BACE,yBAAKC,MAAO,CACEC,KAAM,IACNC,MAAM,IACNC,MAAM,QAClB,kBAAC,EAAD,OAEF,yBAAKH,MAAO,CACEC,KAAM,IACNC,MAAO,IACPC,MAAM,QAClB,kBAAC,EAAD,OAEF,yBAAKH,MAAO,CACEC,KAAM,IACNC,MAAM,IACNC,MAAM,QAClB,kBAAC,EAAD,CACMT,MAAM,mBACNC,KCHV,2JDME,yBAAKK,MAAO,CACEC,KAAM,IACNC,MAAO,IACPC,MAAM,QAClB,kBAAC,EAAD,CACMT,MAAM,kBACNC,KC3BV,6ND8BE,yBAAKK,MAAO,CACEC,KAAM,IACNC,MAAM,IACNC,MAAM,QAClB,kBAAC,EAAD,CACMT,MAAM,YACNC,KC5BV,8SD+BE,yBAAKK,MAAO,CACEC,KAAM,IACNC,MAAM,IACNC,MAAM,QAClB,kBAAC,EAAD,CACMT,MAAM,mBACNC,KCtDV,4YCUWS,MARf,WACE,OACE,8BACE,wC,ohBCDN,IAAMC,EAAOnC,IAAOoC,EAAV,KA6BKC,MARf,YAAiC,IAAf/B,EAAc,EAAdA,MAAOgC,EAAO,EAAPA,KACvB,OACE,kBAACH,EAAD,CAAMG,KAAMA,EAAMC,OAAO,UACrBjC,ICCOkC,MApBf,WAAgB,IAAD,EACqBC,mBAAS,kBAAC,EAAD,OAD9B,mBACNC,EADM,KACKC,EADL,KAGb,OACE,6BACE,kBAAC,EAAD,MACA,yBAAKjB,UAAU,aACb,6BACE,kBAAC,EAAD,CAAWpB,MAAM,KAAKC,QAAS,kBAAMoC,EAAa,kBAAC,EAAD,UAClD,kBAAC,EAAD,CAAWrC,MAAM,cAAcC,QAAS,kBAAMoC,EAAa,kBAAC,EAAD,UAC3D,kBAAC,EAAD,CAASrC,MAAM,cAAcgC,KAAK,yDAClC,kBAAC,EAAD,CAAShC,MAAM,YAAYgC,KAAK,gCAEjCI,EACD,oCCZYE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.5fa5e39e.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport styled from 'styled-components';\n\nconst Head = styled.div`\n  box-sizing: border-box;\n  color: white;\n  margin: 0;\n  height: 100px;\n  text-align: center;\n  padding: 20px 0 20px 0;\n  font-size: 3em;\n  \n`;\n\nfunction Header() {\n  return (\n    <Head>\n      Hi! I'm an aspiring front-end developer\n    </Head>\n  );\n}\n\nexport default Header;\n","import React from 'react';\nimport styled from 'styled-components';\nimport './App.css';\n\nconst Button = styled.button`\n  box-sizing: border-box;\n  color: white;\n  font-family: 'Montserrat', sans-serif;\n  font-size: 1.2em;\n  background-color: hsl(198, 100%, 23%);\n  padding: 0.5em 1em;\n  margin: 1.7em;\n  font-weight: 600;\n  border: none;\n  border-radius: 5px;\n  box-shadow: -5px 5px hsl(0,0%,20%);\n  width: 180px;\n  cursor: pointer;\n  transition: all 0.2s ease-in-out;\n  &:hover {\n    transition: all 0.2s ease-in-out;\n    background-color: hsl(198, 100%, 40%);\n  }\n`;\n\nfunction NavButton({ label, onClick }) {\n  return (\n    <Button onClick={onClick}>\n      {label}\n    </Button>\n  );\n}\n\nexport default NavButton;\n","import React from 'react';\nimport './App.css';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst ProgressBar = styled.div`\n  height: 11px;\n  width: 150px;\n  border: 3px solid white;\n  border-radius: 8px;\n  background-color: white;\n  float: right;\n  right: 10px;\n  margin-top: 7px;\n  margin-right: 10px;\n`;\n\nconst Progress = styled.div` \n  height: 11px;\n  border-radius: 5px;\n  width: ${props => props.value}%;\n  background-color: hsl(198, 100%, 30%);\n`;\n\nconst Label = styled.span`\n  color: white;\n`;\n\nfunction CVBlockElement({label, progress, sub}) {\n  return(\n    <li>\n      <Label>{label}</Label>\n      {progress != undefined\n          ? <ProgressBar>\n              <Progress value={progress} />\n            </ProgressBar> \n          : undefined}\n      <ul>\n      {sub\n        ? sub\n          .map((element) => (\n            <CVBlockElement\n              label={element.label}\n              progress={element.progress}\n              sub={element.sub}\n            />\n          ))\n        : undefined}\n      </ul>\n    </li>\n  );\n}\n\nexport default CVBlockElement;","import React from 'react';\nimport './App.css';\nimport PropTypes from 'prop-types';\nimport CVBlockElement from './CVBlockElement';\nimport styled from 'styled-components';\n\nconst Div = styled.div`\n  border-radius: 7px;\n  padding: 0.1em 1em;\n  margin: 1.5em 1em;\n  background-image: \n      linear-gradient(180deg, hsl(40,85%,63%) 60px, hsl(0,0%,35%) 60px);\n  box-shadow: -7px 7px hsl(0,0%,20%);\n`;\n\nconst Text = styled.div`\n  color: white;\n  white-space: pre-line;\n  line-height: 2em;\n  margin: 30px 15px;\n  font-weight: 600;\n`;\n\nfunction CVBlock({ elements, title, text }) {\n  return (\n    <Div>\n      <h3 className=\"block-header\">{title}</h3>\n      {elements != undefined\n        ? (<ul>\n          {elements\n            .map((element) => (\n              <CVBlockElement\n                label={element.label}\n                progress={element.progress}\n                sub={element.sub}\n              />\n            ))}\n        </ul>)\n        : undefined}\n        {text != undefined\n          ? <Text>{text}</Text>\n          : undefined }\n    </Div>\n  );\n}\n\nCVBlock.propTypes = {\n  elements: PropTypes.object,\n  title: PropTypes.string,\n};\n\nexport default CVBlock;\n","import React from 'react';\nimport './App.css';\nimport CVBlock from './CVBlock';\n\nfunction CVBlockTech() {\n  return (\n    <CVBlock\n      title=\"Technologies, tools, frameworks\"\n      elements={[\n        { label: 'HTML5', progress: 40 },\n        {\n          label: 'CSS3',\n          progress: 40,\n          sub: [\n            { label: 'SASS (SCSS)', progress: 30 },\n          ],\n        },\n        { label: 'JavaScript ES6+', progress: 20},\n        { label: 'React', progress: 10 },\n        {\n          label: 'Java 11+',\n          progress: 40,\n          sub: [\n            { label: 'JUnit, AssertJ', progress: 10 },\n            { label: 'JavaFX', progress: 10 },\n            { label: 'Maven', progress: 30 },\n          ],\n        },\n        { label: 'VBA', progress: 40 },\n        { label: 'SQL (Oracle, MySQL)', progress: 10 },\n        { label: 'Git', progress: 40 },\n        { label: 'Linux', progress: 25 },\n        { label: 'Inkscape', progress: 20 },\n        { label: 'Figma', progress: 20 },\n      ]}\n    />\n  );\n}\n\n\nexport default CVBlockTech;\n","import React from 'react';\nimport CVBlock from './CVBlock';\nimport './App.css';\n\n\nfunction CVBlockLang() {\n  return (\n    <CVBlock\n      title=\"Languages spoken\"\n      elements={[\n        { label: 'Polish', progress: 100 },\n        { label: 'English', progress: 70 },\n        { label: 'French', progress: 15 },\n        { label: 'Italian', progress: 10 },\n      ]}\n    />\n  );\n}\n\nexport default CVBlockLang;","import React from 'react';\nimport './App.css';\nimport CVBlockTech from './CVBlockTech';\nimport CVBlockLang from './CVBlockLang';\nimport CVBlock from './CVBlock';\nimport {technologies,work,education,otherSkills} from './CVBlockContents';\n\nfunction CV() {\n  return (\n    <main>\n      <div style={{\n                    flex: \"2\",\n                    order:\"1\",\n                    width:\"40%\"}}>\n        <CVBlockTech />\n      </div>\n      <div style={{\n                    flex: \"2\",\n                    order: \"2\",\n                    width:\"40%\"}}>\n        <CVBlockLang />\n      </div>\n      <div style={{\n                    flex: \"4\",\n                    order:\"3\",\n                    width:\"40%\"}}>\n        <CVBlock \n              title=\"Auxillary skills\"\n              text={otherSkills}>\n        </CVBlock>\n      </div>\n      <div style={{\n                    flex: \"1\",\n                    order: \"4\",\n                    width:\"60%\"}}>\n        <CVBlock\n              title=\"Work experience\"\n              text={work}>\n        </CVBlock>\n      </div>\n      <div style={{\n                    flex: \"1\",\n                    order:\"5\",\n                    width:\"60%\"}}>\n        <CVBlock \n              title=\"Education\"\n              text={education}>\n        </CVBlock>\n      </div>\n      <div style={{\n                    flex: \"4\",\n                    order:\"6\",\n                    width:\"60%\"}}>\n        <CVBlock \n              title=\"Technical skills\"\n              text={technologies}>\n        </CVBlock>\n      </div>\n    </main>\n  );\n}\n\nexport default CV;\n","const technologies = \n    '\\u2022 Knowledge of good programming practises: DRY, SOLID\\n'+\n    '\\u2022 Experience with unit testing and test driven development\\n'+\n    '\\u2022 Knowledge of design patterns, data structures and algorithms\\n'+\n    '\\u2022 Experience with object oriented programming\\n'+\n    '\\u2022 Knowledge of functional programming fundamentals\\n'+\n    '\\u2022 Knowledge of relational databases\\n'+\n    '\\u2022 Working with version control systems';\n\nconst work = \n    '2017 - currently\\n'+\n    'Environmental Protection Specialist, EU ETS Auditor\\n'+\n    'at TÜV Rheinland Polska Sp. z o.o.\\n'+\n    'Industry Services & Cybersecurity Department\\n\\n'+\n    '2016 - 2017\\n'+\n    'Intern at TÜV Rheinland Polska Sp. z o.o.';\n\nconst education = \n    'Currently participating in „Java from Scratch” course by Software Development Academy\\n\\n'+\n    '2012 - 2016\\n'+\n    'University of Silesia in Katowice\\nFaculty of Computer Science and Material Science\\n'+\n    'B.Eng. Biomedical Engineering; specialty: Medical Computer Science\\n'+\n    'specialisation: Medical Imaging';\n\nconst otherSkills = \n    '\\u2022 Vast experience in working directly with clients\\n'+\n    '\\u2022 Knowledge of UI / UX design fundamentals\\n'+\n    '\\u2022 Experience with public presentations';\n\n\n\nexport {technologies, work, education,otherSkills};\n\n    ","import React from 'react';\nimport './App.css';\n\nfunction MyProjects() {\n  return (\n    <main>\n      <h3>W.I.P.</h3>\n    </main>\n  );\n}\n\nexport default MyProjects;\n","import React from 'react';\nimport styled from 'styled-components';\nimport './App.css';\n\n\nconst Link = styled.a`\n  box-sizing: border-box;\n  text-align: center;\n  color: white;\n  font-size: 1.2em;\n  background-color: hsl(198, 100%, 23%);\n  padding: 0.5em 1em;\n  margin: 1.7em;\n  font-weight: 600;\n  text-decoration: none;\n  border-radius: 5px;\n  box-shadow: -5px 5px hsl(0,0%,20%);\n  width: 180px;\n  display: inline-block;\n  transition: all 0.2s ease-in-out;\n  &:hover {\n    transition: all 0.2s ease-in-out;\n    background-color: hsl(198, 100%, 40%);\n  }\n`;\n\nfunction NavLink({label, href}) {\n  return (\n    <Link href={href} target=\"_blank\">\n      { label }\n    </Link>\n  );\n}\n\nexport default NavLink;\n","import React, { useState } from 'react';\nimport './App.css';\n\nimport Header from './Header';\nimport NavButton from './NavButton';\nimport CV from './CV';\nimport MyProjects from './MyProjects';\nimport NavLink from './NavLink';\n\n\nfunction App() {\n  const [displayed, setDisplayed] = useState(<CV />);\n\n  return (\n    <div>\n      <Header />\n      <div className='container'>\n        <nav>\n          <NavButton label=\"CV\" onClick={() => setDisplayed(<CV />)} />\n          <NavButton label=\"My projects\" onClick={() => setDisplayed(<MyProjects />)} />\n          <NavLink label=\"My Linkedin\" href=\"https://www.linkedin.com/in/ewelina-kania-6188bb143/\" />\n          <NavLink label=\"My Github\" href=\"https://github.com/Pietoro\" />\n        </nav>\n        {displayed}\n        <footer></footer>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}