{"version":3,"sources":["Header.jsx","NavButton.jsx","CVBlockElement.jsx","CVBlock.jsx","CV.jsx","MyProjects.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Header","Button","Styled","button","NavButton","label","onClick","CVBlockElement","progress","sub","undefined","value","map","element","CVBlock","elements","title","CV","MyProjects","App","useState","displayed","setDisplayed","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wOAWeA,MARf,WACE,OACE,2C,wGCDJ,IAAMC,E,KAASC,EAAOC,OAAV,KAYGC,MARf,YAAwC,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,QAC1B,OACE,kBAACL,EAAD,CAAQK,QAASA,GACdD,ICqBQE,MA5Bf,SAASA,EAAT,GAAmD,IAAzBF,EAAwB,EAAxBA,MAAOG,EAAiB,EAAjBA,SAAUC,EAAO,EAAPA,IACzC,OACE,4BACGJ,OACYK,GAAZF,EACG,8BAAUG,MAAOH,SAAeE,EACpC,4BACGD,EACGA,EACCG,KAAI,SAACC,GAAD,OACH,kBAACN,EAAD,CACEF,MAAOQ,EAAQR,MACfG,SAAUK,EAAQL,SAClBC,IAAKI,EAAQJ,cAGjBC,KCQGI,MAvBf,YAAuC,IAApBC,EAAmB,EAAnBA,SAAUC,EAAS,EAATA,MAC3B,OACE,6BACE,4BAAKA,GACL,4BACGD,EACEH,KAAI,SAACC,GAAD,OACH,kBAAC,EAAD,CACER,MAAOQ,EAAQR,MACfG,SAAUK,EAAQL,SAClBC,IAAKI,EAAQJ,YCWZQ,MAtBf,WACE,OACE,mCAEE,kBAAC,EAAD,CACED,MAAM,QACND,SAAU,CACR,CAAEV,MAAO,QAASG,SAAU,IAC5B,CAAEH,MAAO,OAAQG,SAAU,IAC3B,CACEH,MAAO,kBACPG,SAAU,GACVC,IAAK,CACH,CAAEJ,MAAO,QAASG,SAAU,WCN3BU,MARf,WACE,OACE,8CCyBWC,MArBf,WAAgB,IAAD,EACqBC,mBAAS,kBAAC,EAAD,OAD9B,mBACNC,EADM,KACKC,EADL,KAGb,OACE,6BACE,kBAAC,EAAD,MACA,6BACE,kBAAC,EAAD,CAAWjB,MAAM,KAAKC,QAAS,kBAAMgB,EAAa,kBAAC,EAAD,UAClD,kBAAC,EAAD,CAAWjB,MAAM,cAAcC,QAAS,kBAAMgB,EAAa,kBAAC,EAAD,WAO5DD,EACD,wCCbcE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.216aa33a.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nfunction Header() {\n  return (\n    <header>\n      Header\n    </header>\n  );\n}\n\nexport default Header;\n","import React from 'react';\nimport Styled from 'styled-components';\nimport './App.css';\n\nconst Button = Styled.button`\n  background-color: red;\n`;\n\nfunction NavButton({ label, onClick }) {\n  return (\n    <Button onClick={onClick}>\n      {label}\n    </Button>\n  );\n}\n\nexport default NavButton;\n","import React from 'react';\nimport './App.css';\nimport PropTypes from 'prop-types';\n\nfunction CVBlockElement({ label, progress, sub }) {\n  return (\n    <li>\n      {label}\n      {progress != undefined\n        ? <progress value={progress} /> : undefined}\n      <ul>\n        {sub\n          ? sub\n            .map((element) => (\n              <CVBlockElement\n                label={element.label}\n                progress={element.progress}\n                sub={element.sub}\n              />\n            ))\n          : undefined}\n      </ul>\n    </li>\n  );\n}\n\nCVBlockElement.propTypes = {\n  label: PropTypes.string,\n  progress: PropTypes.number,\n  sub: PropTypes.array,\n};\n\nexport default CVBlockElement;\n","import React from 'react';\nimport './App.css';\nimport PropTypes from 'prop-types';\nimport CVBlockElement from './CVBlockElement';\n\nfunction CVBlock({ elements, title }) {\n  return (\n    <div>\n      <h3>{title}</h3>\n      <ul>\n        {elements\n          .map((element) => (\n            <CVBlockElement\n              label={element.label}\n              progress={element.progress}\n              sub={element.sub}\n            />\n          ))}\n      </ul>\n    </div>\n  );\n}\n\nCVBlock.propTypes = {\n  elements: PropTypes.object,\n  title: PropTypes.string,\n};\n\nexport default CVBlock;\n","import React from 'react';\nimport './App.css';\nimport CVBlock from './CVBlock';\n\nfunction CV() {\n  return (\n    <main>\n      CV\n      <CVBlock\n        title=\"Title\"\n        elements={[\n          { label: 'HTML5', progress: 0.4 },\n          { label: 'CSS3', progress: 0.4 },\n          {\n            label: 'JavaScript ES6+',\n            progress: 0.2,\n            sub: [\n              { label: 'React', progress: 0.1 },\n            ],\n          },\n        ]}\n      />\n    </main>\n  );\n}\n\nexport default CV;\n","import React from 'react';\nimport './App.css';\n\nfunction MyProjects() {\n  return (\n    <main>\n      My Projects\n    </main>\n  );\n}\n\nexport default MyProjects;\n","import React, { useState } from 'react';\nimport './App.css';\n\nimport Header from './Header';\nimport NavButton from './NavButton';\nimport CV from './CV';\nimport MyProjects from './MyProjects';\n\n\nfunction App() {\n  const [displayed, setDisplayed] = useState(<CV />);\n\n  return (\n    <div>\n      <Header />\n      <nav>\n        <NavButton label=\"CV\" onClick={() => setDisplayed(<CV />)} />\n        <NavButton label=\"My projects\" onClick={() => setDisplayed(<MyProjects />)} />\n        {\n        // TODO\n        // <NavLink label=\"My Github\" href=\"https://github.com/Pietoro\" />\n        // <NavLink label=\"My LinkedIn\" href=\"tubydzielink\" />\n        }\n      </nav>\n      {displayed}\n      <footer>Ef</footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}